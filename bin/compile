#!/bin/bash

set -e
set -o pipefail

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname "$(dirname "$0")")"

function main() {
  export_env_dir "$ENV_DIR"

  # Get latest stable version from the tailscale pkgs page
  TAILSCALE_VERSION=${TAILSCALE_VERSION:-$("$BUILDPACK_DIR"/bin/tailscale_versions.sh | sort -r | head -1)}

  # if we have a cached copy of the tailscale executable...
  if [ -f "$CACHE_DIR/tailscale" ]; then
    cached_version=$("$CACHE_DIR/tailscale" --version | head -1)

    # ...and the cached version matches the requested version.
    if [ "$cached_version" = "$TAILSCALE_VERSION" ]; then
      echo "Installing Tailscale v$TAILSCALE_VERSION from cache" | major
      copy_binaries_from_cache
    fi
  fi

  if [ ! -f "$BUILD_DIR/bin/tailscale" ]; then
    echo "Installing Tailscale v$TAILSCALE_VERSION" | major
    install_from_apt
    copy_binaries_to_cache
    copy_binaries_from_cache
  fi

  copy_start_script
  echo "Tailscale installed" | major
  echo
}

function indent() {
  sed -u 's/^/       /'
}

function major() {
  sed -u 's/^/-----> /'
}

export_env_dir() {
  env_dir=$1
  acceptlist_regex=${2:-''}
  denylist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    # shellcheck disable=SC2045
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$acceptlist_regex" | grep -qvE "$denylist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

function copy_binaries_from_cache() {
  echo "Copying tailscale binaries to $BUILD_DIR/bin" | indent
  mkdir -p "$BUILD_DIR/bin"
  cp "$CACHE_DIR/tailscale" "$BUILD_DIR/bin/tailscale"
  cp "$CACHE_DIR/tailscaled" "$BUILD_DIR/bin/tailscaled"
}

function copy_binaries_to_cache() {
  cp "$APT_CACHE_DIR/tailscale/usr/bin/tailscale" "$CACHE_DIR/tailscale"
  cp "$APT_CACHE_DIR/tailscale/usr/sbin/tailscaled" "$CACHE_DIR/tailscaled"
}

function install_from_apt() {
  # load the VERSION_CODENAME ENV var from the OS.
  . /etc/os-release

  APT_CACHE_DIR="$HOME/apt/cache"
  APT_STATE_DIR="$HOME/apt/state"
  APT_KEYRINGS_DIR="$HOME/apt/keyrings"
  APT_SOURCELIST_DIR="$HOME/apt/sources"   # place custom sources.list here
  APT_SOURCEPARTS_DIR="$APT_SOURCELIST_DIR/sources.list.d"
  APT_SOURCES="$APT_SOURCELIST_DIR/sources.list"

  rm -rf "${CACHE_DIR}/apt"
  mkdir -p "$CACHE_DIR/apt"
  mkdir -p "$APT_CACHE_DIR"
  mkdir -p "$APT_CACHE_DIR/archives/partial"
  mkdir -p "$APT_STATE_DIR/lists/partial"
  mkdir -p "$APT_SOURCELIST_DIR"   # make dir for sources

  if [ ! "$(whoami)" = "heroku" ]; then
    {
      chown -Rv _apt:"$(whoami)" "$APT_CACHE_DIR/archives/partial/"
      chmod -Rv 700 "$APT_CACHE_DIR/archives/partial/"
    } 2>&1 | indent
  fi

  cp -R "/usr/share/keyrings" "$APT_KEYRINGS_DIR"

  cat "/etc/apt/sources.list" > "$APT_SOURCES"    # no cp here
  cp -R "/etc/apt/sources.list.d" "$APT_SOURCEPARTS_DIR"

  APT_OPTIONS=("-o" "debug::nolocking=true" "-o" "dir::cache=$APT_CACHE_DIR" "-o" "dir::state=$APT_STATE_DIR")
  # Override the use of /etc/apt/sources.list (sourcelist) and /etc/apt/sources.list.d/* (sourceparts).
  APT_OPTIONS+=("-o" "dir::etc::sourcelist=$APT_SOURCES" "-o" "dir::etc::sourceparts=$APT_SOURCEPARTS_DIR")
  APT_OPTIONS+=("--allow-downgrades" "--allow-remove-essential" "--allow-change-held-packages")

  # shellcheck disable=SC2069
  {
    TS_KEYFILE="$APT_KEYRINGS_DIR/tailscale-archive-keyring.gpg"
    TS_SOURCEFILE="$APT_SOURCEPARTS_DIR/tailscale.list"
    curl --silent "https://pkgs.tailscale.com/stable/ubuntu/$VERSION_CODENAME.noarmor.gpg" > "$TS_KEYFILE"
    curl --silent "https://pkgs.tailscale.com/stable/ubuntu/$VERSION_CODENAME.tailscale-keyring.list" > "$TS_SOURCEFILE-raw"

    # deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/ubuntu noble main
    awk "{sub(\"signed-by=[^\]]+\", \"signed-by=$TS_KEYFILE\"); print}" "$TS_SOURCEFILE-raw" > "$TS_SOURCEFILE"
    rm "$TS_SOURCEFILE-raw"

    apt-get "${APT_OPTIONS[@]}" update
    apt-get "${APT_OPTIONS[@]}" -y -d install tailscale="$TAILSCALE_VERSION" tailscale-archive-keyring
    for DEB in "$APT_CACHE_DIR/archives/tailscale"*.deb; do
      dpkg -x "$DEB" "$APT_CACHE_DIR/tailscale/"
    done
  } 2>&1 | indent
}

function copy_start_script() {
  echo "Copying tailscale start script" | indent
  mkdir -p "$BUILD_DIR"/.profile.d
  cp "$BUILDPACK_DIR"/bin/start_tailscale.sh "$BUILD_DIR"/.profile.d/tailscale.sh
}

main
